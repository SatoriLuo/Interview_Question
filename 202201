1、虚函数表的结构，存储的位置在哪里？、
  结构：
    当一个类继承了另一个类的时候，同时也会继承基类的函数调用权。一个类一旦声明了虚函数，那么就会生成一个虚函数表，一个类继承了包含虚函数的基类，那么这个类也具有自己的虚函数表。
    虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。
    虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就可以构造出来了。
    虚表是属于类的，而不是属于某个具体的对象，一个类只需要一个虚表即可。同一个类的所有对象都使用同一个虚表。

    为了指定对象的虚表，对象内部包含一个虚表的指针，来指向自己所使用的虚表。为了让每个包含虚表的类的对象都拥有一个虚表指针，编译器在类中添加了一个指针，*__vptr，用来指向虚表。
    这样，当类的对象在创建时便拥有了这个指针，且这个指针的值会自动被设置为指向类的虚表。
    只要抓住“对象的虚表指针用来指向自己所属类的虚表，虚表中的指针会指向其继承的最近的一个类的虚函数”这个特点，便可以快速将这几个类的对象模型在自己的脑海中描绘出来。
    
    详细解析链接：https://zhuanlan.zhihu.com/p/75172640
  
  存储位置：
    C++中虚函数表位于只读数据段（.rodata），也就是C++内存模型中的常量区；而虚函数则位于代码段（.text），也就是C++内存模型中的代码区。
    
    详细解析链接：https://blog.csdn.net/qq_28114615/article/details/98041319

2、如何理解Linux/Unix哲学-一切皆文件？
  Linux仲所有内容都是以文件的形式保存和管理的，即一切皆文件，普通文件是文件，目录（Windows下称为文件夹）是文件，硬件设备（键盘、监视器、硬盘、打印机）是文件，
  就连套接字（socket）、网络通信等资源也都是文件。
  优点：
    开发者仅需要使用一套API和开发工具即可调取Linux系统中绝大部分的资源。举个简单例子，Linux中几乎所有读（读文件，读系统状态，读socket，读PIPE）的操作都可以用read函数来进行；
    几乎所有更改（更改文件，更改系统参数，写socket，写PIPE）的操作都可以用write函数来进行。
  
  缺点：
    使用任何硬件设备都必须与根目录下某一个目录执行挂载操作，否则无法使用。我们知道，本身Linux具有一个以根目录为树根的文件目录结构，每个设备也同样如此，他们是相互独立的。
    如果我们想通过Linux上的根目录找到设备文件的目录结构，就必须将这两个文件系统合二为一，这就是挂载的真正含义。
